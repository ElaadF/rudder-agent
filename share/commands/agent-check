#!/bin/sh
# @description check if rudder agent has no problem and is running properly
# @man Check that rudder agent is working properly.
# @man - generate missing UUID or keys
# @man - kill cfengine if there are too many processes
# @man - run cfengine if its daemon is missing
# @man - clean lock file if it is too big
# @man - check that promises have been properly copied
# @man - will sleep a random time (max half the run interval) when not run in interactive mode
# @man +
# @man *Options*:
# @man +
# @man *-q*: run the agent in quiet mode (display only error and warning messages)
# @man +
# @man *-c*: run the agent without color output
# @man +
# @man *-f*: prevent sleeping in non-interactive mode
# @man +
# @man *-u*: only check the uuid existence


. "${BASEDIR}/../lib/common.sh"

QUIET=false
SLEEP=true
ONLY_UUID=false

while getopts "qcfu" opt; do
  case $opt in
    q)
      QUIET=true
      ;;
    c)
      clear_colors
      ;;
    f)
      SLEEP=false
      ;;
    u)
      ONLY_UUID=true
      ;;
  esac
done

# Variables
BACKUP_DIR=/var/backups/rudder/

# Default variables for CFEngine binaries and disable files
CFE_DIR=/var/rudder/cfengine-community
CFE_DISABLE_FILE=/opt/rudder/etc/disable-agent
UUID_FILE=/opt/rudder/etc/uuid.hive

## Paths for Rudder Server Roles
RUDDER_SERVER_ROLES=/opt/rudder/etc/server-roles.d

# Get common commands from common.sh
init_commands

# Ensure script is executed by root
MYUID=`id | cut -d\( -f2 | cut -d\) -f1`
if [ "${MYUID}" != 'root' ];then echo "You must be root"; exit; fi

# Get the value of rudder-agent run interval from file /var/rudder/cfengine-community/inputs/run_interval
if [ -f "${CFE_DIR}/inputs/run_interval" ]; then
  RUN_INTERVAL=`cat "${CFE_DIR}/inputs/run_interval"`
  # If the value is not a number, reset to 5
  if ! test "${RUN_INTERVAL}" -gt 0 2>/dev/null
  then
    RUN_INTERVAL=5
  fi
else
  # File does not exists, use default value 5
  RUN_INTERVAL=5
fi

# sleep for a random time, if not interactive
if [ ! -t 0 ]; then
 if [ "$SLEEP" = true ]; then
    # we half the interval in the hope of not running at the same time as the agent
    MAX_SLEEP=`expr ${RUN_INTERVAL} \* 30` # in second
    SLEEP_DURATION=$(awk -v m="$MAX_SLEEP" 'BEGIN{print int(rand()*m)}')
    sleep $SLEEP_DURATION
  fi
fi

##################################################################
#### Test functions, skip to 'TEST' tag to read testing order ####
##################################################################

# remofe cfengine lock files
clean_cf_lock_files() {
  rm -f ${CFE_DIR}/state/cf_lock.lmdb
  rm -f ${CFE_DIR}/state/cf_lock.lmdb.lock
}

# CFEngine key directory must not be accessible by 'group' or 'other'
check_and_fix_cfengine_keys() {
  if [ -d ${CFE_DIR}/ppkeys ]; then
    chmod 700 ${CFE_DIR}/ppkeys
    if [ `ls ${CFE_DIR}/ppkeys | wc -l` -gt 0 ]; then
      chmod 600 ${CFE_DIR}/ppkeys/*
    fi
  fi
}

# There must be exactly one cf-execd running, and not too many agents
check_and_fix_cfengine_processes() {

  # If there are more than one cf-execd process, we must kill them
  # A standard kill won't kill them, so the -9 is necessary to make sure they are stopped
  # They will be restarted by the check below, if the disable file is not set
  # List the cf-execd processes running (without the path, they can be run manually)
  CF_EXECD_RUNNING=`${PS_COMMAND} | grep "${CFE_DIR}/bin/cf-execd" | sed -e '/grep/d' | cat`
  NB_CF_EXECD_RUNNING=`echo "${CF_EXECD_RUNNING}" | sed -e '/^$/d' | wc -l`
  if [ ${NB_CF_EXECD_RUNNING} -gt 1 ]; then
    printf "WARNING: Too many instance of CFEngine cf-execd processes running. Killing them..."
    echo "${CF_EXECD_RUNNING}" | awk 'BEGIN { OFS=" "} {print $2 }' | xargs kill -9 || true
    echo " Done"
  fi

  # List the CFEngine processes running
  CF_PROCESS_RUNNING=`${PS_COMMAND} | grep -E "${CFE_DIR}/bin/cf-(agent|execd)" | cat`
  # Count the number of processes running, filtering empty lines
  NB_CF_PROCESS_RUNNING=`echo "${CF_PROCESS_RUNNING}" | sed -e '/^$/d' | wc -l`

  # If no disable file AND no process of CFEngine from Rudder, then relaunch cf-agent with a failsafe first
  # But this is applied only on servers or nodes already initialized (policy server set)
  if [ ! -f "${CFE_DISABLE_FILE}" ] && [ "${NB_CF_PROCESS_RUNNING}" -eq 0 ]; then
    printf "WARNING: No disable file detected and no agent executor process either. Restarting agent service..."
    rudder agent stop
    rudder agent start
    echo " Done"
  fi

  # Check for anomalous number of CFEngine processes
  # If there are more than 6 agent/executor processes, we should kill them, and purge the lock database
  # 6 means 1 cf-execd + 5 cf-agent
  if [ "${NB_CF_PROCESS_RUNNING}" -gt 6 ]; then
    printf "WARNING: Too many instance of CFEngine processes running. Killing them, and purging the CFEngine lock database..."
    echo "${CF_PROCESS_RUNNING}" | awk 'BEGIN { OFS=" "} {print -$2 }' | xargs kill -9 || true
    rudder agent stop
    clean_cf_lock_files
    rudder agent start
    echo " Done"
  fi
}

# Agent must have been updated recently
check_and_fix_last_update() {
  CHECK_INTERVAL=`expr ${RUN_INTERVAL} \* 2`

  # Check for the age of the last update file
  # if it is older than twice CHECK_INTERVAL minutes, and the disable file is not defined, we
  # need to kill the lock database
  if [ ! -f "${LAST_UPDATE_FILE}" ] || [ -f "${CFE_DISABLE_FILE}" ]; then
    # Either the file ${LAST_UPDATE_FILE} is not yet present, and this node is
    # probably not accepted yet, either the file ${CFE_DISABLE_FILE} is present, so
    # the agent won't update the ${LAST_UPDATE_FILE}.
    # In both case, do nothing
    :
  elif test `find ${LAST_UPDATE_FILE} -mmin +${CHECK_INTERVAL}`; then
    printf "WARNING: The file ${LAST_UPDATE_FILE} is older than twice ${CHECK_INTERVAL} minutes, the agent is probably stuck. Purging the CFEngine lock database..."
    clean_cf_lock_files
    echo " Done";
  fi
}

# Lock file must too big (10M is big)
check_and_fix_cf_lock() {
  MAX_CF_LOCK_SIZE=10485760
  if [ -f "${CFE_DIR}/state/cf_lock.lmdb" ]; then
    if [ "${OS_FAMILY}" = "AIX" ]; then
      CF_LOCK_SIZE=`istat "${CFE_DIR}/state/cf_lock.lmdb" | grep Length | sed "s%^.*Length \([0-9]*\) bytes.*$%\1%"`
    else
      CF_LOCK_SIZE=`stat -c%s "${CFE_DIR}/state/cf_lock.lmdb"`
    fi

    if [ "${CF_LOCK_SIZE}" -ge "${MAX_CF_LOCK_SIZE}" ]; then
      printf "WARNING: The file ${CFE_DIR}/state/cf_lock.lmdb is too big (${CF_LOCK_SIZE} bytes), purging it..."
      clean_cf_lock_files
      echo " Done"
    fi
  fi
}

# Rudder uuid must exist
check_and_fix_rudder_uuid() {

  # Default variable about UUID backup
  LATEST_BACKUPED_UUID=""
  
  # Generate a UUID if we don't have one yet
  if [ ! -f "${UUID_FILE}" ]; then
    if [ -d "${BACKUP_DIR}" ]; then
      LATEST_BACKUPED_UUID=`ls -1 ${BACKUP_DIR}uuid-*.hive | sort | tail -n1` || true
    fi
    if [ "${LATEST_BACKUPED_UUID}" != "" ]; then
      printf "WARNING: The UUID of the node does not exist. The lastest backup (${LATEST_BACKUPED_UUID}) will be recovered..."
      ${CP_A} ${LATEST_BACKUPED_UUID} ${UUID_FILE} >/dev/null
      echo " Done"
    else
      printf "WARNING: The UUID of the node does not exist and no backup exist. A new one will be generated..."
      /opt/rudder/bin/rudder-uuidgen > ${UUID_FILE}
      echo " Done"
    fi
  else
    # UUID is valid only if it has been generetaed by uuidgen or if it is set to 'root' for policy server
    REGEX=`x="[a-f0-9][a-f0-9][a-f0-9][a-f0-9]" && echo "$x$x-$x-$x-$x-$x$x$x"`
    CHECK_UUID=`cat /opt/rudder/etc/uuid.hive | egrep "^$REGEX|^root" | wc -l`
    # If the UUID is not valid, regenerate it
    if [ ${CHECK_UUID} -ne 1 ]; then
      printf "INFO: Creating a new UUID for Rudder as the existing one is invalid..."
      # Keep a backup of UUID even if it is not valid
      mkdir -p "${BACKUP_DIR}"
      cp -f /opt/rudder/etc/uuid.hive ${BACKUP_DIR}/uuid-`date +%Y%m%d`.hive
      # Generate a new one
      /opt/rudder/bin/rudder-uuidgen > ${UUID_FILE}
      echo " Done."
    fi
  fi
}

# Important CFEngine input files must exist and pass cf-promises test
check_and_fix_inputs() {
  # if file is absent or empty there have been a problem with update
  if [ -s "${CFE_DIR}/inputs/common/1.0/update.cf" ] || [ -s "${CFE_DIR}/inputs/failsafe.cf" ] || [ -s "${CFE_DIR}/inputs/promises.cf" ] || ! ${CFE_DIR}/bin/cf-promises -f failsafe.cf > /dev/null || ! ${CFE_DIR}/bin/cf-promises > /dev/null
  then
    printf "ERROR: There was an error during promises update. Reseting to initial promises and updating..."
    rm -rf ${CFE_DIR}/inputs/*
    if [ -d "/opt/rudder/share/initial-promises" ] # rudder package has been properly installed
    then
      rudder agent reset
    fi
    echo " Done"
  fi


}

# function used below to test if a directory has space
check_space() {
  dir="$1"
  max_percent="$2"
  if [ -d "${dir}" ]; then
    space=$(df "${dir}" | tail -n 1 | awk '{print $5}' | sed 's/%//')
    if [ "${space}" -gt "${max_percent}" ]; then
      echo "FATAL: No space left on device '${dir}'" | logger -s
      stop_now=1
    fi
  fi
}

# There must be enough space for rudder components to run
check_varspace() {
  # check max space available for databases and stop Rudder if there is a risk
  if [ -f ${RUDDER_SERVER_ROLES}/rudder-ldap ]; then
    check_space /var/rudder/ldap/ 98
  fi

  if [ -f ${RUDDER_SERVER_ROLES}/rudder-reports ]; then
    # Get the run path of postgresql
    PG_TABLES_PATH=$(su - postgres -c 'psql -t -c  "show data_directory;"')
    if [ -z "${PG_TABLES_PATH}" ]; then
      echo "FATAL: Cannot connect to PostgreSQL - please check its status" | logger -s
    else
      check_space "${PG_TABLES_PATH}" 98
    fi
  fi

  if [ "${stop_now}" = 1 ]; then
    rudder agent disable -s

    if [ "${RUDDER_SYSLOG_PROTOCOL}" = 1 ]; then
      # If syslog is using TCP, we cannot stop postgresql otherwise all infra can go down - but we can stop rudder-jetty and disable rudder agent
      if [ -f ${RUDDER_SERVER_ROLES}/rudder-jetty ]; then
        systemctl stop rudder-jetty
        echo "FATAL: Rudder has been stopped and disabled to prevent data corruption" | logger -s
      fi
      exit 1
    else
      # In UDP, we can stop everything
      if [ -f ${RUDDER_SERVER_ROLES}/rudder-server-root ]; then
        systemctl stop rudder-server
        echo "FATAL: Rudder has been stopped and disabled to prevent data corruption" | logger -s
      elif [ -f ${RUDDER_SERVER_ROLES}/rudder-jetty ]; then
        systemctl stop rudder-jetty
        echo "FATAL: Rudder Web Interface has been stopped and disabled to prevent data corruption" | logger -s
      fi
      if [ -f ${RUDDER_SERVER_ROLES}/rudder-reports ]; then
        # Try with systemd
        POSTGRESQL_SERVICE_NAME=$(systemctl list-unit-files --type service | awk -F'.' '{print $1}' | grep -E "^postgresql-?[0-9]*$" | tail -n 1)
        
        # If nothing try with chkconfig (sles 12 only: postgresql is properly managed by systemd but cannot be detected with the line above)
        if [ -z "${POSTGRESQL_SERVICE_NAME}" ] && ! type chkconfig >/dev/null 2>/dev/null ; then
          POSTGRESQL_SERVICE_NAME=$(chkconfig 2>/dev/null | awk '{ print $1 }' | grep "postgresql" | tail -n 1)
        fi
        
        # If nothin try default name (should not happen)
        if [ -z "${POSTGRESQL_SERVICE_NAME}" ]; then
          POSTGRESQL_SERVICE_NAME="postgresql"
        fi

        systemctl stop ${POSTGRESQL_SERVICE_NAME}
        echo "FATAL: PostgreSQL has been shut down to prevent data corruption" | logger -s
      fi
    fi
    [ "$QUIET" = false ] && printf "${GREEN}ok${NORMAL}: Rudder couldn't find enough space to run and stopped services. Please free up space!\n"
    exit 1
  fi
}


#########################
#### TEST start here ####
#########################

if [ "${ONLY_UUID}" = true ]
then
  check_and_fix_rudder_uuid
  # Since we are in set -e there was no error here
  [ "$QUIET" = false ] && printf "${GREEN}ok${NORMAL}: Rudder agent check enforced the uuid without errors.\n"
  exit 0
fi

# Check for free space and stop if there is not enough
check_varspace
# Agent must have an UUID
check_and_fix_rudder_uuid

LAST_UPDATE_FILE="${CFE_DIR}/last_successful_inputs_update"
# Agent must have public and private keys
check_and_fix_cfengine_keys
# There must be exactly one cf-execd process and not too many agente
check_and_fix_cfengine_processes
# Agent must have been updated recently
check_and_fix_last_update
# Lock file must too big
check_and_fix_cf_lock
# Important CFEngine input files must exist and pass cf-promises test
check_and_fix_inputs

[ "$QUIET" = false ] && printf "FINISH: Rudder agent check ran properly, please look at messages above to see if there has been any error.\n"

