#!/bin/sh
# @description check if rudder agent has no problem and is running properly
# @man Check that rudder agent is working properly.
# @man - generate missing UUID
# @man - kill cfengine if there are too many processes
# @man - run cfengine if its daemon is missing
# @man - clean lock file if it is too big
# @man - check and restore init files 
# @man - check that promises have been properly copied
# @man +
# @man *Options*:
# @man +
# @man *-q*: run the agent in quiet mode (display only error messages)
# @man +
# @man *-c*: run the agent without color output

. "${BASEDIR}/../lib/common.sh"

QUIET=false

while getopts "qc" opt; do
  case $opt in
    q)
      QUIET=true
      ;;
    c)
      clear_colors
      ;;
  esac
done

# Source /etc/profile to gather environment variables from the system and the user
. /etc/profile

# Do not use set -e in the check script, otherwise a failing action may prevent repairing the problem
#set -e

# Variables
BACKUP_DIR=/var/backups/rudder/

## Which database system is used in CFEngine ?
## TokyoCabinet (tcdb), Lightning MDB (lmdb)
CFENGINE_DB_EXT=lmdb

# Default variables for CFEngine binaries and disable files
RUDDER_CFE_DIR=/var/rudder/cfengine-community
ENTERPRISE_CFE_DIR=/var/cfengine
CFE_DISABLE_FILE=/opt/rudder/etc/disable-agent
UUID_FILE=/opt/rudder/etc/uuid.hive

# Get common commands from common.sh
init_commands

clean_cf_lock_files() {
  rm -f ${CFE_DIR}/state/cf_lock.${CFENGINE_DB_EXT}
  rm -f ${CFE_DIR}/state/cf_lock.${CFENGINE_DB_EXT}.lock
}

check_and_fix_cfengine_keys() {
  # Making sure that the permissions on the CFEngine key directory are correct...
  if [ -d ${CFE_DIR}/ppkeys ]; then
    chmod 700 ${CFE_DIR}/ppkeys
    if [ `ls ${CFE_DIR}/ppkeys | wc -l` -gt 0 ]; then
      chmod 600 ${CFE_DIR}/ppkeys/*
    fi
  fi
}

check_and_fix_cfengine_processes() {
  # If there are more than on cf-execd process, we must kill them
  # A standard kill won't kill them, so the -9 is necessary to make sure they are stopped
  # They will be restarted by the next check, if the disable file is not set
  # List the cf-execd processes running (without the path, they can be run manually)
  CF_EXECD_RUNNING=`${PS_COMMAND} | grep "${CFE_BIN_DIR}/cf-execd" | sed -e '/grep/d' | cat`
  NB_CF_EXECD_RUNNING=`echo "${CF_EXECD_RUNNING}" | sed -e '/^$/d' | wc -l`
  if [ ${NB_CF_EXECD_RUNNING} -gt 1 ]; then
    printf "WARNING: Too many instance of CFEngine cf-execd processes running. Killing them..."
    echo "${CF_EXECD_RUNNING}" | awk 'BEGIN { OFS=" "} {print $2 }' | xargs kill -9 || true
    echo " Done"
  fi

  # List the CFEngine processes running
  CF_PROCESS_RUNNING=`${PS_COMMAND} | grep -E "${CFE_BIN_DIR}/cf-(agent|execd)" | cat`
  # Count the number of processes running, filtering empty lines
  NB_CF_PROCESS_RUNNING=`echo "${CF_PROCESS_RUNNING}" | sed -e '/^$/d' | wc -l`

  # If no disable file AND no process of CFEngine from Rudder, then relaunch cf-agent with a failsafe first
  # But this is applied only on servers or nodes already initialized (policy server set)
  if [ ! -f "${CFE_DISABLE_FILE}" ] && [ "${NB_CF_PROCESS_RUNNING}" -eq 0 ] && [ -f "${CFE_DIR}/policy_server.dat" ]; then
    printf "WARNING: No disable file detected and no agent executor process either. Restarting agent service..."
    rudder agent stop
    rudder agent start
    echo " Done"
  fi

  # List cf-serverd processes running
  CF_SERVER_RUNNING=`${PS_COMMAND} | grep "${CFE_BIN_DIR}/cf-serverd" | sed -e '/grep/d' | cat`
  # Count the number of server processes running, filtering empty lines
  NB_CF_SERVER_RUNNING=`echo "${CF_SERVER_RUNNING}" | sed -e '/^$/d' | wc -l`

  # If no disable file AND no process of CFEngine server from Rudder, then relaunch cf-serverd with a failsafe first
  # But this is applied only on servers or nodes already initialized (policy server set)
  if [ ! -f "${CFE_DISABLE_FILE}" ] && [ "${NB_CF_SERVER_RUNNING}" -eq 0 ] && [ -f "${CFE_DIR}/policy_server.dat" ]; then
    printf "WARNING: No disable file detected and no CFEngine server process either. Relaunching CFEngine server process..."
    ${CFE_BIN_DIR}/cf-agent -f failsafe.cf
    ${CFE_BIN_DIR}/cf-serverd
    echo " Done"
  fi

  # Get the value of rudder-agent run interval from file /var/rudder/cfengine-community/inputs/run_interval
  if [ -f "${CFE_DIR}/inputs/run_interval" ]; then
    RUN_INTERVAL=`cat "${CFE_DIR}/inputs/run_interval"`
    # If the value is not a number, reset to 5
    if ! test "${RUN_INTERVAL}" -gt 0 2>/dev/null
    then
      RUN_INTERVAL=5
    fi
  else
    # File does not exists, use default value 5
    RUN_INTERVAL=5
  fi

  CHECK_INTERVAL=`expr ${RUN_INTERVAL} \* 2`

  # Check for the age of the last update file
  # if it is older than CHECK_INTERVAL minutes, and the disable file is not defined, we
  # need to kill the lock database
  if [ ! -f "${LAST_UPDATE_FILE}" ] || [ -f "${CFE_DISABLE_FILE}" ]; then
    # Either the file ${LAST_UPDATE_FILE} is not yet present, and this node is
    # probably not accepted yet, either the file ${CFE_DISABLE_FILE} is present, so
    # the agent won't update the ${LAST_UPDATE_FILE}.
    # In both case, do nothing
    :
  elif test `find ${LAST_UPDATE_FILE} -mmin +${CHECK_INTERVAL}`; then
    printf "WARNING: The file ${LAST_UPDATE_FILE} is older than ${CHECK_INTERVAL} minutes, the agent is probably stuck. Purging the CFEngine lock database..."
    clean_cf_lock_files
    echo " Done";
  fi


  # Check for anomalous number of CFEngine processes
  # If there are more than 8 agent/executor processes, we should kill them, and purge the lock database
  if [ "${NB_CF_PROCESS_RUNNING}" -gt 8 ]; then
    printf "WARNING: Too many instance of CFEngine processes running. Killing them, and purging the CFEngine lock database..."
    echo "${CF_PROCESS_RUNNING}" | awk 'BEGIN { OFS=" "} {print -$2 }' | xargs kill -9 || true
    if [ -e /etc/init.d/rudder-agent ] && [ "${OS_FAMILY}" != "AIX" ] || [ "${OS_FAMILY}" = "SunOS" ]; then
      /etc/init.d/rudder-agent forcestop || true
    fi
    clean_cf_lock_files
    echo " Done"
  fi
}

# Check the size of the cf_lock file
check_and_fix_cf_lock() {
  MAX_CF_LOCK_SIZE=10485760
  if [ -f "${CFE_DIR}/state/cf_lock.${CFENGINE_DB_EXT}" ]; then

    if [ "${OS_FAMILY}" = "AIX" ]; then
      CF_LOCK_SIZE=`istat "${CFE_DIR}/state/cf_lock.${CFENGINE_DB_EXT}" | grep Length | sed "s%^.*Length \([0-9]*\) bytes.*$%\1%"`
    else
      CF_LOCK_SIZE=`stat -c%s "${CFE_DIR}/state/cf_lock.${CFENGINE_DB_EXT}"`
    fi

    if [ "${CF_LOCK_SIZE}" -ge "${MAX_CF_LOCK_SIZE}" ]; then
      printf "WARNING: The file ${CFE_DIR}/state/cf_lock.${CFENGINE_DB_EXT} is too big (${CF_LOCK_SIZE} bytes), purging it..."
      clean_cf_lock_files
      echo " Done"
    fi
  fi
}

check_and_fix_rudder_uuid() {

  # Default variable about UUID backup
  LATEST_BACKUPED_UUID=""
  
  # Generate a UUID if we don't have one yet
  if [ ! -f "${UUID_FILE}" ]; then
    if [ -d "${BACKUP_DIR}" ]; then
      LATEST_BACKUPED_UUID=`ls -v1 ${BACKUP_DIR}uuid-*.hive | tail -n1`
    fi
    if [ "${LATEST_BACKUPED_UUID}" != "" ]; then
      printf "WARNING: The UUID of the node does not exist. The lastest backup (${LATEST_BACKUPED_UUID}) will be recovered..."
      ${CP_A} ${LATEST_BACKUPED_UUID} ${UUID_FILE} >/dev/null
      echo " Done"
    else
      printf "WARNING: The UUID of the node does not exist and no backup exist. A new one will be generated..."
      /opt/rudder/bin/rudder-uuidgen > ${UUID_FILE}
      echo " Done"
    fi
  else
    # UUID is valid only if it has been generetaed by uuidgen or if it is set to 'root' for policy server
    REGEX=`x="[a-f0-9][a-f0-9][a-f0-9][a-f0-9]" && echo "$x$x-$x-$x-$x-$x$x$x"`
    CHECK_UUID=`cat /opt/rudder/etc/uuid.hive | egrep "^$REGEX|^root" | wc -l`
    # If the UUID is not valid, regenerate it
    if [ ${CHECK_UUID} -ne 1 ]; then
      printf "INFO: Creating a new UUID for Rudder as the existing one is invalid..."
      # Keep a backup of UUID even if it is not valid
      mkdir -p "${BACKUP_DIR}"
      cp -f /opt/rudder/etc/uuid.hive ${BACKUP_DIR}/uuid-`date +%Y%m%d`.hive
      # Generate a new one
      /opt/rudder/bin/rudder-uuidgen > ${UUID_FILE}
      echo " Done."
    fi
  fi
}


check_and_fix_specific_rudder_agent_file() {
  FILE_TO_RESTORE=$1
  FILE_BACKUP_NAME=$2
  RESOLUTION=$3
  MANDATORY=$4

  LATEST_BACKUPED_FILES=""
  
  if [ ! -f ${FILE_TO_RESTORE} ]; then
    if [ -d ${BACKUP_DIR} ]; then
      LATEST_BACKUPED_FILES=`ls -v1 ${BACKUP_DIR}${FILE_BACKUP_NAME}-* | tail -n1`
    fi
    if [ "${LATEST_BACKUPED_FILES}" != "" ]; then
      printf "WARNING: The file ${FILE_TO_RESTORE} does not exist. The lastest backup (${LATEST_BACKUPED_FILES}) will be recovered..."
      ${CP_A} ${LATEST_BACKUPED_FILES} ${FILE_TO_RESTORE} >/dev/null
      echo " Done"
    else
      if [ "${MANDATORY}" = "mandatory" ]; then
        echo "ERROR: The file ${FILE_TO_RESTORE} does not exist and no backup exists. ${RESOLUTION}"
      fi
    fi
  fi
}

empty() {
  [ ! -f "$1" ] || [ $(du "$1" | awk '{print $1}') = "0" ]
}

check_and_fix_inputs() {
  # if file is absent or empty there have been a problem with update
  if empty "${CFE_DIR}/inputs/common/1.0/update.cf" || empty "${CFE_DIR}/inputs/failsafe.cf" || empty "${CFE_DIR}/inputs/promises.cf" || ! ${CFE_BIN_DIR}/cf-promises -f failsafe.cf
  then
    printf "ERROR: There was an error during promises update. Reseting to initial promises and updating..."
    rm -rf ${CFE_DIR}/inputs/*
    if [ -d "/opt/rudder/share/initial-promises" ] # rudder package has been properly installed
    then
      cp -r /opt/rudder/share/initial-promises/* ${CFE_DIR}/inputs/
      ${CFE_BIN_DIR}/cf-agent -K -f failsafe.cf && ${CFE_BIN_DIR}/cf-agent
    else # this is an enterprise only agent
      if [ -e "${CFE_DIR}/policy_server.dat" ]
      then
        ${CFE_BIN_DIR}/cf-agent --bootstrap `cat "${CFE_DIR}/policy_server.dat"`
      fi
    fi
    echo " Done"
  fi

  # Ensure main promises are not broken, and clean ncf cache and force a new download if so
  if ${CFE_BIN_DIR}/cf-promises | grep error > /dev/null
  then
    rm -rf ${CFE_DIR}/state/ncf-exclude-cache-*
    rm -f ${CFE_DIR}/inputs/rudder_promises_updated
  fi
}

check_varspace() {
  # check max space available for databases and stop if there is a risk
  if [ -d /var/rudder/ldap/ ]; then
    ldap_space=$(df /var/rudder/ | tail -n 1 | awk '{print $5}' | sed 's/%//')
    if [ "${ldap_space}" -gt 98 ]; then
      stop_now=1
    fi
  fi
  if [ -d /var/lib/postgresql/ ]; then
    psql_space=$(df /var/lib/postgresql/ | tail -n 1 | awk '{print $5}' | sed 's/%//')
    if [ "${psql_space}" -gt 98 ]; then
      stop_now=1
    fi
  fi
  if [ "${stop_now}" = 1 ]; then
    service rudder stop
    echo "FATAL: No space left on device" | logger -s
    echo "FATAL: Rudder has been stopped to prevent data corruption" | logger -s
    exit 1
  fi
}


# Ensure script is executed by root
MYUID=`id | cut -d\( -f2 | cut -d\) -f1`
if [ "${MYUID}" != 'root' ];then echo "You must be root"; exit; fi

# Launch each check with a certain order
check_varspace
check_and_fix_rudder_uuid
check_and_fix_specific_rudder_agent_file /var/rudder/cfengine-community/policy_server.dat policy_server.dat "Please configure your Rudder server in this file." "optional"

# Once for rudder's cfengine
if [ -e "${RUDDER_CFE_DIR}/bin/cf-agent" ]
then
  CFE_DIR="${RUDDER_CFE_DIR}"
  CFE_BIN_DIR="${CFE_DIR}/bin"
  LAST_UPDATE_FILE="${CFE_DIR}/last_successful_inputs_update"
  NEED_INIT_FILES="true"
  check_and_fix_cfengine_keys
  check_and_fix_cfengine_processes
  check_and_fix_cf_lock
  check_and_fix_inputs
fi

# Once for enterprise cfengine, only if managed by Rudder
# We count the number of file containing "rudder"; if there are more than 3, then it's Rudder managed
if [ -e "${ENTERPRISE_CFE_DIR}/bin/cf-agent" ]
then
  CFE_DIR="${ENTERPRISE_CFE_DIR}"
  CFE_BIN_DIR="${CFE_DIR}/bin"
  LAST_UPDATE_FILE="${CFE_DIR}/last_successful_inputs_update"
  # Check number of file starting by rudder in the folder
  COUNT_RUDDER_FILE=`find ${CFE_DIR}/inputs | grep rudder | wc -l`
  if [ ${COUNT_RUDDER_FILE} -gt 3 ]
    then
    check_and_fix_cfengine_keys
    check_and_fix_cfengine_processes
    check_and_fix_cf_lock
    check_and_fix_inputs
  fi
fi

# The following files are not present on AIX systems
if [ "${NEED_INIT_FILES}" = "true" ] && [ "${OS_FAMILY}" != "AIX" ] || [ "${OS_FAMILY}" = "SunOS" ]; then
  check_and_fix_specific_rudder_agent_file /etc/init.d/rudder-agent rudder-agent.init "Please reinstall the rudder-agent package." "mandatory"
  check_and_fix_specific_rudder_agent_file /etc/default/rudder-agent rudder-agent.default "Please reinstall the rudder-agent package." "mandatory"
  check_and_fix_specific_rudder_agent_file /etc/cron.d/rudder-agent rudder-agent.cron "Please reinstall the rudder-agent package." "mandatory"
fi

# Since we are in set -e there was no error here
[ "$QUIET" = false ] && printf "${GREEN}ok${NORMAL}: Rudder agent check ran without errors.\n"
