#!/bin/sh
# @description display a summary of agent information
# @man Outputs detailed information about the agent configuration, especially
# @man what defines the node (hostname, uuid and key hash) and its
# @man policy server.
# @man +
# @man *Options*:
# @man +
# @man *-v*: run the agent in verbose mode, prints detailed information

. "${BASEDIR}/../lib/common.sh"
. "${BASEDIR}/../lib/cfengine_parsing.sh"

VERBOSE=false

while getopts "v" opt; do
  case $opt in
    v)
      VERBOSE=true
      ;;
  esac
done

if [ -f "${SERVER_HASH_FILE}" ] && [ -f "${CFE_SERVER_HASH_FILE}" ]
then
  PINNING="full"
elif [ -f "${SERVER_HASH_FILE}" ]
then
  PINNING="only HTTPS"
elif [ -f "${CFE_SERVER_HASH_FILE}" ]
then
  PINNING="only CFEngine"
else
  PINNING="none"
fi

CERT_CRE=$(openssl x509 -startdate -noout -in ${RUDDER_DIR}/etc/ssl/agent.cert | cut -d= -f2)
[ $? -ne 0 ] && CERT_CRE="Not yet configured"
CERT_EXP=$(openssl x509 -enddate -noout -in ${RUDDER_DIR}/etc/ssl/agent.cert | cut -d= -f2)
[ $? -ne 0 ] && CERT_EXP="Not yet configured"
CERT_FINGERPRINT=$(openssl x509 -in ${RUDDER_DIR}/etc/ssl/agent.cert -noout -fingerprint -sha1 | cut -d= -f2)
[ $? -ne 0 ] && CERT_FINGERPRINT="Not yet configured"
KEY_HASH=$(${RUDDER_DIR}/bin/cf-key -p /var/rudder/cfengine-community/ppkeys/localhost.pub)
[ $? -ne 0 ] && KEY_HASH="Not yet configured"

POLICY=$(cat ${RUDDER_VAR}/cfengine-community/policy_server.dat 2>/dev/null)
[ $? -ne 0 ] && POLICY="Not yet configured"

POLICY_FETCHED=$(modification_time ${RUDDER_VAR}/cfengine-community/last_successful_inputs_update 2> /dev/null)
[ $? -ne 0 ] && POLICY_FETCHED="Not yet updated" || POLICY_FETCHED=$(echo "${POLICY_FETCHED}" | cut -d'.' -f1)

INVENTORY_SENT=$(modification_time ${RUDDER_VAR}/tmp/inventory_sent 2> /dev/null)
[ $? -ne 0 ] && INVENTORY_SENT="Not yet sent" || INVENTORY_SENT=$(echo "${INVENTORY_SENT}" | cut -d'.' -f1)

VERSION=`${RUDDER_BIN} agent version`

echo "Hostname: $(get_hostname)"
echo "UUID: ${UUID}"
echo "Key hash: ${KEY_HASH}"
echo "Certificate creation: ${CERT_CRE}"
echo "Certificate expiration: ${CERT_EXP}"
echo "Certificate fingerprint: ${CERT_FINGERPRINT}"
[ "${VERBOSE}" = "true" ] && echo "Certificate:" && cat ${RUDDER_DIR}/etc/ssl/agent.cert
echo "Key pinning: ${PINNING}"
echo "Policy server: ${POLICY}"
if [ -n "${RUDDER_NODE_KIND}" ]
then
  echo "Role: ${RUDDER_NODE_KIND}"
fi
if [ -n "${RUDDER_REPORT_MODE}" ]
then
  echo "Report mode: ${RUDDER_REPORT_MODE}"
fi
echo "Run interval: ${AGENT_RUN_INTERVAL} min"
if [ -e ${RUDDER_DIR}/etc/disable-agent ]; then
  echo "Agent is disabled since $(modification_time ${RUDDER_DIR}/etc/disable-agent)"
else
  echo "Agent is enabled"
fi
if [ -e ${RUDDER_DIR}/etc/force-audit-agent ]; then
  echo "Agent is forced in audit mode since $(modification_time ${RUDDER_DIR}/etc/force-audit-agent)"
else
  echo "Agent is not forced in audit mode"
fi
if [ -n "${RUDDER_NODE_CONFIG_ID}" ]
then
  echo "Configuration id: ${RUDDER_NODE_CONFIG_ID}"
fi
echo "Policy updated: ${POLICY_FETCHED}"
echo "Inventory sent: ${INVENTORY_SENT}"
echo "Version: ${VERSION}"

# Display system classes in verbose mode
if [ "${VERBOSE}" = "true" ]; then
  echo "Defined system conditions:"
  "${RUDDER_DIR}/bin/cf-promises" --show-classes | grep "hardclass$" | awk '{ print "  " $1 }'
fi

