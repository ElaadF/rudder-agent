#!/bin/sh
# @description update promises on agent
# @man The agent will fetch the last version of its promises from its configured
# @man policy server.
# @man +
# @man *Options*:
# @man +
# @man *-i*: run the agent in information mode, prints basic information
# @man +
# @man *-v*: run the agent in verbose mode, prints detailed information
# @man +
# @man *-d*: run the agent in debug mode, prints low-level information
# @man +
# @man *-q*: run the agent in quiet mode (display only error messages)
# @man +
# @man *-c*: run the agent without color output
# @man +
# @man *-f*: force full update

. "${BASEDIR}/../lib/common.sh"

VERBOSITY=""
FORCE=false
QUIET=false

while getopts "iIvdqcf" opt; do
  case $opt in
    i|I)
      VERBOSITY="-I ${INFO_CLASS}"
      QUIET=false
      ;;
    v)
      VERBOSITY="-v ${VERBOSE_CLASS}"
      QUIET=false
      ;;
    d)
      VERBOSITY="-d ${DEBUG_CLASS}"
      QUIET=false
      ;;
    q)
      VERBOSITY=""
      QUIET=true
      ;;
    c)
      COLOR=""
      ;;
    f)
      FORCE=true
      ;;
  esac
done

if [ "${FORCE}" = "true" ]; then
  rm -f ${RUDDER_VAR}/cfengine-community/inputs/rudder-promises-generated

  rm -f ${RUDDER_VAR}/tools/rudder_tools_updated
  rm -f ${RUDDER_VAR}/ncf/common/ncf_hash_file
  rm -f ${RUDDER_VAR}/ncf/local/ncf_hash_file
fi

# check if we are in a bootstrap state
if [ ! -f "${RUDDER_VAR}/cfengine-community/inputs/promises.cf" ]
then
  if [ -f "${RUDDER_VAR}/cfengine-community/policy_server.dat" ]
  then
    SERVER=$(cat "${RUDDER_VAR}/cfengine-community/policy_server.dat")
    # boostrap
    "${RUDDER_VAR}/cfengine-community/bin/cf-agent" ${VERBOSITY} ${COLOR} --bootstrap "${SERVER}:${BOOTSTRAP_PORT}"
    # remove port in policy_server.dat
    sed -i 's/:[0-9]*//' "${RUDDER_VAR}/cfengine-community/policy_server.dat"
    # next update should update dependencies (namely ncf) nicely
  else
    [ "${QUIET}" = false ] && echo "No policy server file, cannot update"
    exit 1
  fi
fi

# The awk part is the workaround for update not exiting with a 1 in case of error
# It will be necessary to remove it once the exit it back in cf-agent
# It must be changed if the error messages are back to stderr
"${RUDDER_VAR}/cfengine-community/bin/cf-agent" ${VERBOSITY} ${COLOR} -K -f failsafe.cf | awk 'BEGIN{e=0}{print; if(match($0,/^ *error:/)){e=1}}END{exit e}'
code=$?

if [ $code -eq 0 ]; then
  [ "$QUIET" = false ] && printf "${GREEN}ok${NORMAL}: Rudder agent promises were updated.\n"
  exit 0
else
  printf "${RED}error${NORMAL}: Rudder agent promises could not be updated.\n" 1>&2
  exit $code
fi
